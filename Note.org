* Game state
  Indicates state for the current point in the lifetime of the
  simulation.  Once the current state snapshot is sent to the render
  system that snapshot then remains static until the next state
  snapshot identified and created.  All systems are feed the
  information to act on and generate the next state snapshot.
** Game state: World is tied to one of the following
   - Ticks of processor time, jiffies lapsed
   - Ticks of real time, ms lapsed
   - A single work item, one round of work performed or computation.
** Snapshot of the world
   - Just like in the game of life.
   - You have
     - current
     - next obtained from that current
   - Then swap
** This will feed into other systems.
   - Where does this state live?
   - In Assets?
     - Data now lives out in classes
     - Manipulation systems request access from asset directly
   - In Systems?
     - Data is centralized to that system
     - Association links need maintained

* Load Variables
  - Examples:
    - Setting screen description
    - Player name
    - Full screen Y/N
    - Audio type
  - Types:
    - Numbers
    - Strings
  - Contain a hard coded default
  - May be overridden by a file
  
* Render Context
* Load intro screen
* Load assets
  - Main repository of assets
    - Models
    - Textures
    - Sounds
    - Scripts
    - Shaders
    - Maps
    - AI
  - Reference the repository and make copies
* Initiate Game
* Check options
* Launch game
* Game loop 
  - Identify Discrete Steps
  - Create Time line of events
  - execute events
    - Create
    - Destroy
    - Start
    - Stop
  - Perform physics
  - Render
* Shutdown loop
* Release assets
* Exit
